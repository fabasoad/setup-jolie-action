---
name: Functional Tests

on: # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  pull_request:
    paths:
      - .github/workflows/functional-tests.yml
      - src/**
      - action.yml
  schedule:
    # Every Friday at 09:00 JST
    - cron: "0 0 * * 5"
  workflow_dispatch: {}

defaults:
  run:
    shell: sh

jobs:
  # TODO: Add matrix tests for jpm-version
  get-versions:
    name: Get 3 latest versions
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      versions: ${{ steps.prepare-list.outputs.versions }}
    steps:
      - name: Get releases
        id: github-releases
        uses: yakubique/github-releases@v1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repository: "jolie/jolie"
          sort: "desc"
      - name: Prepare list
        id: prepare-list
        env:
          RELEASES_AMOUNT: "3"
        run: |
          versions=$(echo '${{ steps.github-releases.outputs.releases }}' \
            | jq -c -r --arg n "${RELEASES_AMOUNT}" '.[0:($n | tonumber)] | map(sub("^v"; "")) | . += ["latest"]')
          echo "versions=${versions}" >> "$GITHUB_OUTPUT"
  setup-jolie:
    name: Setup jolie
    needs: [get-versions]
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu", "windows", "macos"]
        jolie-version: ${{ fromJSON(needs.get-versions.outputs.versions) }}
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Setup Jolie
        id: setup-jolie
        uses: ./
        with:
          jolie-version: ${{ matrix.jolie-version }}
          jpm-installation-mode: "skip"
      - name: Test action completion
        run: |
          test_equal() {
            if [ "${2}" != "${3}" ]; then
              echo "::error title=${1}::Expected: ${3}. Actual: ${2}."
              exit 1
            fi
          }
          test_equal "jolie should be installed" \
            "${{ steps.setup-jolie.outputs.jolie-installed }}" \
            "true"
          test_equal "jpm should not be installed" \
            "${{ steps.setup-jolie.outputs.jpm-installed }}" \
            "false"
      - name: Print version
        run: jolie --version
  setup-jolie-jpm-in-container:
    name: Setup jolie & jpm in container (${{ matrix.image }}, latest)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    container:
      image: ${{ matrix.image }}:latest
    strategy:
      fail-fast: false
      matrix:
        image: ["alpine", "ubuntu"]
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Setup Jolie
        id: setup-jolie
        uses: ./
      - name: Test action completion
        run: |
          test_equal() {
            if [ "${2}" != "${3}" ]; then
              echo "::error title=${1}::Expected: ${3}. Actual: ${2}."
              exit 1
            fi
          }
          test_equal "jolie should be installed" \
            "${{ steps.setup-jolie.outputs.jolie-installed }}" \
            "true"
          test_equal "jpm should be installed" \
            "${{ steps.setup-jolie.outputs.jpm-installed }}" \
            "true"
      - name: Print version
        run: |
          jolie --version
          jpm --version
  test-jolie-jpm-installation-mode:
    name: Test jolie & jpm installation mode
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        installation-mode: ["skip", "idempotent", "always"]
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Setup Jolie 1
        id: setup-jolie-1
        uses: ./
        with:
          jolie-installation-mode: "${{ matrix.installation-mode }}"
          jpm-installation-mode: "${{ matrix.installation-mode }}"
      - name: Setup Jolie 2
        id: setup-jolie-2
        uses: ./
        with:
          jolie-installation-mode: "${{ matrix.installation-mode }}"
          jpm-installation-mode: "${{ matrix.installation-mode }}"
      - name: Test action completion
        run: |
          test_equal() {
            if [ "${2}" != "${3}" ]; then
              echo "::error title=${1}::Expected: ${3}. Actual: ${2}."
              exit 1
            fi
          }
          test_equal "Wrong \"jolie-installed\" output from setup-jolie-1" \
            "${{ steps.setup-jolie-1.outputs.jolie-installed }}" \
            "${{ matrix.installation-mode != 'skip' }}"
          test_equal "Wrong \"jolie-installed\" output from setup-jolie-2" \
            "${{ steps.setup-jolie-2.outputs.jolie-installed }}" \
            "${{ matrix.installation-mode == 'always' }}"
          test_equal "Wrong \"jpm-installed\" output from setup-jolie-1" \
            "${{ steps.setup-jolie-1.outputs.jpm-installed }}" \
            "${{ matrix.installation-mode != 'skip' }}"
          test_equal "Wrong \"jpm-installed\" output from setup-jolie-2" \
            "${{ steps.setup-jolie-2.outputs.jpm-installed }}" \
            "${{ matrix.installation-mode == 'always' }}"
