---
name: "Setup Jolie"
author: Yevhen Fabizhevskyi
description: "Set up a specific version of Jolie."
branding:
  icon: terminal
  color: gray-dark
inputs:
  version:
    description: Jolie version. Defaults to the latest version.
    required: false
    default: "latest"
  force:
    description: |
      If "false" skips installation if jolie is already installed. If "true"
      installs jolie in any case. Defaults to "false".
    required: false
    default: "false"
  github-token:
    description: |
      GitHub token that is used to send requests to GitHub API such as getting
      latest release. Defaults to the token provided by GitHub Actions environment.
    required: false
    default: ${{ github.token }}
outputs:
  installed:
    description: Whether jolie was installed or not.
    value: "${{ steps.install-jolie.outcome == 'success' }}"
runs:
  using: "composite"
  steps:
    - name: Validate inputs
      env:
        INPUT_VERSION: "${{ inputs.version }}"
        INPUT_FORCE: "${{ inputs.force }}"
      run: ./validate-inputs.sh "${INPUT_VERSION}" "${INPUT_FORCE}"
      shell: sh
      working-directory: ${{ github.action_path }}/src

    - name: Collect info
      id: info
      env:
        INPUT_FORCE: "${{ inputs.force }}"
      run: ./collect-info.sh "${INPUT_FORCE}"
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    - name: Setup dependencies
      if: ${{ steps.info.outputs.bin-installed == 'false' }}
      run: |
        ./setup-dependencies.sh \
          "${{ steps.info.outputs.realpath-installed }}" \
          "${{ steps.info.outputs.bash-installed }}" \
          "${{ steps.info.outputs.maven-installed }}" \
          "${{ steps.info.outputs.curl-installed }}" \
          "${{ steps.info.outputs.tar-installed }}"
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    #    - name: Setup Java (Linux)
    #      if: (steps.info.outputs.bin-installed == 'false'
    #        && steps.info.outputs.java-installed == 'false'
    #        && runner.os == 'Linux')
    #      env:
    #        JAVA_VERSION: "21"
    #      run: ./setup-java-linux.sh "${JAVA_VERSION}"
    #      shell: sh
    #      working-directory: "${{ github.action_path }}/src"

    - name: Setup Java (Windows, macOS)
      if: (steps.info.outputs.bin-installed == 'false'
        && steps.info.outputs.java-installed == 'false')
      uses: actions/setup-java@v4
      with:
        distribution: "zulu"
        java-version: "21"
        token: "${{ inputs.github-token }}"

    - name: Setup maven
      if: (steps.info.outputs.bin-installed == 'false'
        && steps.info.outputs.maven-installed == 'false')
      env:
        MAVEN_VERSION: "3.9.9"
      run: ./setup-maven.sh "${MAVEN_VERSION}"
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    - name: Setup jq
      if: ${{ steps.info.outputs.bin-installed == 'false' }}
      uses: dcarbone/install-jq-action@v3

    - name: Print versions
      if: ${{ runner.debug == '1' && steps.info.outputs.bin-installed == 'false' }}
      run: ./print-versions.sh
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    - name: Get latest release
      if: ${{ steps.info.outputs.bin-installed == 'false' && inputs.version == 'latest' }}
      id: latest-release
      env:
        INPUT_GITHUB_TOKEN: "${{ inputs.github-token }}"
      run: ./get-latest-release.sh "jolie/jolie" "${INPUT_GITHUB_TOKEN}"
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    - name: Download jolie
      if: ${{ steps.info.outputs.bin-installed == 'false' }}
      uses: actions/checkout@v4
      with:
        repository: "jolie/jolie"
        ref: ${{ format('v{0}', inputs.version == 'latest' && steps.latest-release.outputs.version || inputs.version) }}
        fetch-depth: 1
        path: ${{ steps.info.outputs.bin-dir }}

    - name: Install jolie
      if: ${{ steps.info.outputs.bin-installed == 'false' }}
      id: install-jolie
      run: |
        mvn install -Dmaven.test.skip=true --quiet
        bin_path="$(pwd)/bin_$(date '+%Y%m%d%H%M%S')"
        mkdir -p "${bin_path}"
        echo "${bin_path}" >> "$GITHUB_PATH"
        ./scripts/dev-setup.sh "${bin_path}"
        echo "JOLIE_HOME=${bin_path}/jolie-dist" >> "$GITHUB_ENV"
      shell: bash
      working-directory: "${{ steps.info.outputs.bin-path }}"

    - name: Print version
      run: jolie --version
      shell: sh
