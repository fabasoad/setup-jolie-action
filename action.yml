---
name: "Setup Jolie"
author: Yevhen Fabizhevskyi
description: "Set up a specific version of Jolie."
branding:
  icon: terminal
  color: gray-dark
inputs:
  version:
    description: Jolie version. Defaults to the latest version.
    required: false
    default: "latest"
  force:
    description: |
      If "false" skips installation if jolie is already installed. If "true"
      installs jolie in any case. Defaults to "false".
    required: false
    default: "false"
  github-token:
    description: |
      GitHub token that is used to send requests to GitHub API such as getting
      latest release. Defaults to the token provided by GitHub Actions environment.
    required: false
    default: ${{ github.token }}
  install-jpm:
    description: |
      Set to true if you want to install Jolie package manager. Set to false if
      you want to skip the Jolie package manager installation. Defaults to "true".
    required: false
    default: "true"
outputs:
  installed:
    description: Whether jolie was installed or not.
    value: "${{ env.SETUP_JOLIE_ACTION_OUTCOME == 'success' }}"
runs:
  using: "composite"
  steps:
    - name: Validate inputs
      env:
        INPUT_VERSION: "${{ inputs.version }}"
        INPUT_FORCE: "${{ inputs.force }}"
        INPUT_INSTALL_JPM: "${{ inputs.install-jpm }}"
      run: |
        ./validate-inputs.sh \
          "${INPUT_VERSION}" \
          "${INPUT_FORCE}" \
          "${INPUT_INSTALL_JPM}"
      shell: sh
      working-directory: ${{ github.action_path }}/src

    - name: Collect info
      id: info
      env:
        INPUT_FORCE: "${{ inputs.force }}"
      run: ./collect-info.sh "${INPUT_FORCE}"
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    - name: Setup dependencies
      if: ${{ steps.info.outputs.bin-installed == 'false' }}
      run: |
        ./setup-dependencies.sh \
          "${{ steps.info.outputs.realpath-installed }}" \
          "${{ steps.info.outputs.bash-installed }}" \
          "${{ steps.info.outputs.curl-installed }}" \
          "${{ steps.info.outputs.unzip-installed }}"
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    - name: Setup Java (Alpine)
      if: (steps.info.outputs.bin-installed == 'false'
        && steps.info.outputs.java-installed == 'false'
        && steps.info.outputs.os == 'Alpine')
      env:
        JAVA_VERSION: "21"
      run: ./setup-java-alpine.sh "${JAVA_VERSION}"
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    - name: Setup Java (not Alpine)
      if: (steps.info.outputs.bin-installed == 'false'
        && steps.info.outputs.java-installed == 'false'
        && steps.info.outputs.os != 'Alpine')
      uses: actions/setup-java@v4
      with:
        distribution: "temurin"
        java-version: "21"
        token: "${{ inputs.github-token }}"

    # Linux, macOS: Started
    - name: Download jolie (not Windows)
      if: steps.info.outputs.bin-installed == 'false' && runner.os != 'Windows'
      id: download-jolie
      uses: robinraju/release-downloader@v1
      with:
        repository: "jolie/jolie"
        tag: "${{ inputs.version == 'latest' && '' || format('v{0}', inputs.version) }}"
        latest: "${{ inputs.version == 'latest' }}"
        fileName: "jolie-*.jar"
        out-file-path: "${{ steps.info.outputs.bin-dir }}"

    - name: Install jolie (not Windows)
      if: steps.info.outputs.bin-installed == 'false' && runner.os != 'Windows'
      id: install-jolie-not-windows
      run: |
        java \
          -jar ${{ fromJson(steps.download-jolie.outputs.downloaded_files)[0] }} \
          -jh ${GITHUB_ACTION_PATH}/jolie/${{ steps.info.outputs.bin-dir }}/dist \
          -jl ${GITHUB_ACTION_PATH}/jolie/launchers
        echo "JOLIE_HOME=${GITHUB_ACTION_PATH}/jolie/${{ steps.info.outputs.bin-dir }}/dist" >> "$GITHUB_ENV"
        echo "${GITHUB_ACTION_PATH}/jolie/launchers" >> "$GITHUB_PATH"
      shell: sh

    - name: Set output (not Windows)
      if: steps.info.outputs.bin-installed == 'false' && runner.os != 'Windows'
      run: echo "SETUP_JOLIE_ACTION_OUTCOME=${{ steps.install-jolie-not-windows.outcome }}" >> "$GITHUB_ENV"
      shell: sh
    # Linux, macOS: Completed

    # Windows: Started
    - name: Setup jq
      if: steps.info.outputs.bin-installed == 'false' && inputs.version == 'latest' && runner.os == 'Windows'
      uses: dcarbone/install-jq-action@v3

    - name: Get latest release
      if: steps.info.outputs.bin-installed == 'false' && inputs.version == 'latest' && runner.os == 'Windows'
      id: latest-release
      env:
        INPUT_GITHUB_TOKEN: "${{ inputs.github-token }}"
      run: ./get-latest-release.sh "jolie/jolie" "${INPUT_GITHUB_TOKEN}"
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    - name: Download jolie (Windows)
      if: steps.info.outputs.bin-installed == 'false' && runner.os == 'Windows'
      uses: actions/checkout@v4
      with:
        repository: "jolie/jolie"
        ref: ${{ format('v{0}', inputs.version == 'latest' && steps.latest-release.outputs.version || inputs.version) }}
        fetch-depth: 1
        path: ${{ steps.info.outputs.bin-dir }}

    - name: Install jolie (Windows)
      if: steps.info.outputs.bin-installed == 'false' && runner.os == 'Windows'
      id: install-jolie-windows
      run: |
        mvn install -Dmaven.test.skip=true --quiet
        bin_path="${{ steps.info.outputs.bin-path }}"
        mkdir -p "${bin_path}"
        echo "${bin_path}" >> "$GITHUB_PATH"
        ./scripts/dev-setup.sh "${bin_path}"
        echo "JOLIE_HOME=${bin_path}/jolie-dist" >> "$GITHUB_ENV"
      shell: bash
      working-directory: "${{ steps.info.outputs.bin-path }}"

    - name: Set output (Windows)
      if: steps.info.outputs.bin-installed == 'false' && runner.os == 'Windows'
      run: echo "SETUP_JOLIE_ACTION_OUTCOME=${{ steps.install-jolie-windows.outcome }}" >> "$GITHUB_ENV"
      shell: sh
    # Windows: Completed

    - name: Print version
      run: jolie --version
      shell: sh
